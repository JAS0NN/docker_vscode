# Use BuildKit syntax
# syntax=docker/dockerfile:1

FROM ubuntu:22.04

# Declare target architecture build argument
ARG TARGETARCH

ENV DEBIAN_FRONTEND=noninteractive

# Update and install necessary packages
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    git \
    gnupg2 \
    software-properties-common \
    sudo \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Create a user for running VSCode Server
RUN useradd -m -s /bin/bash vscodeuser && \
    echo "vscodeuser ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

# Set working directory
WORKDIR /home/vscodeuser

# Install code-server directly from GitHub releases (as root)
# First, test network connectivity
RUN apt-get update && apt-get install -y ca-certificates && \
    echo "Testing network connectivity..." && \
    curl -v https://github.com || echo "GitHub connectivity issue detected"

# Download and install code-server with better error handling
RUN mkdir -p /home/vscodeuser/.local/bin && \
    echo "Downloading code-server directly from GitHub..." && \
    VERSION="4.22.1" && \
    # Determine architecture suffix based on TARGETARCH
    ARCH=${TARGETARCH:-$(dpkg --print-architecture)} && \
    echo "Target Architecture: ${ARCH}" && \
    echo "Trying wget with verbose output for code-server v${VERSION} on ${ARCH}..." && \
    (wget -v --no-check-certificate https://github.com/coder/code-server/releases/download/v${VERSION}/code-server-${VERSION}-linux-${ARCH}.tar.gz -O /tmp/code-server.tar.gz || \
    (echo "wget failed, trying curl..." && \
    curl -v -L -o /tmp/code-server.tar.gz https://github.com/coder/code-server/releases/download/v${VERSION}/code-server-${VERSION}-linux-${ARCH}.tar.gz)) && \
    echo "Extracting code-server..." && \
    mkdir -p /home/vscodeuser/.local/lib/code-server && \
    tar -xzf /tmp/code-server.tar.gz --strip-components=1 -C /home/vscodeuser/.local/lib/code-server && \
    echo "Creating symlink to code-server binary..." && \
    ln -sf /home/vscodeuser/.local/lib/code-server/bin/code-server /home/vscodeuser/.local/bin/code-server && \
    echo "Setting permissions..." && \
    chown -R vscodeuser:vscodeuser /home/vscodeuser/.local && \
    echo "Setting up PATH..." && \
    echo 'export PATH=$PATH:/home/vscodeuser/.local/bin' >> /home/vscodeuser/.bashrc

# Copy the VSIX extension file
COPY RooCode_3.12.2.vsix /tmp/

# Install the extension as vscodeuser
USER vscodeuser
WORKDIR /home/vscodeuser

RUN echo "Attempting to install VS Code extension as $(whoami)..." && \
    mkdir -p /home/vscodeuser/.local/share/code-server/extensions && \
    echo "Target extension directory: /home/vscodeuser/.local/share/code-server/extensions" && \
    ls -ld /home/vscodeuser/.local/share/code-server/extensions && \
    echo "Running: /home/vscodeuser/.local/bin/code-server --install-extension /tmp/RooCode_3.12.2.vsix --extensions-dir /home/vscodeuser/.local/share/code-server/extensions" && \
    /home/vscodeuser/.local/bin/code-server --install-extension /tmp/RooCode_3.12.2.vsix --extensions-dir /home/vscodeuser/.local/share/code-server/extensions && \
    echo "Installation command finished. Verifying installation..." && \
    ls -la /home/vscodeuser/.local/share/code-server/extensions && \
    echo "Listing extensions via code-server command:" && \
    /home/vscodeuser/.local/bin/code-server --list-extensions --extensions-dir /home/vscodeuser/.local/share/code-server/extensions || echo "Listing extensions failed during build" && \
    echo "Extension installation step complete."

# Switch back to root for subsequent steps
USER root

# Create config directory and config file with correct permissions and content
RUN mkdir -p /home/vscodeuser/.config/code-server && \
    echo "bind-addr: 0.0.0.0:8080" > /home/vscodeuser/.config/code-server/config.yaml && \
    echo "auth: password" >> /home/vscodeuser/.config/code-server/config.yaml && \
    echo "password: MySecurePassword123" >> /home/vscodeuser/.config/code-server/config.yaml && \
    echo "cert: false" >> /home/vscodeuser/.config/code-server/config.yaml && \
    echo "Verifying config file content during build:" && \
    cat /home/vscodeuser/.config/code-server/config.yaml && \
    chown -R vscodeuser:vscodeuser /home/vscodeuser/.config

# Create entrypoint script
RUN echo '#!/bin/bash' > /entrypoint.sh && \
    echo 'echo "--- Entrypoint Script Start ---"' >> /entrypoint.sh && \
    echo 'echo "Current user: $(whoami)"' >> /entrypoint.sh && \
    echo 'echo "Verifying config file ownership and content at runtime:"' >> /entrypoint.sh && \
    echo 'ls -l /home/vscodeuser/.config/code-server/config.yaml' >> /entrypoint.sh && \
    echo 'cat /home/vscodeuser/.config/code-server/config.yaml' >> /entrypoint.sh && \
    echo 'echo "Verifying extension installation directory contents:"' >> /entrypoint.sh && \
    echo 'ls -la /home/vscodeuser/.local/share/code-server/extensions' >> /entrypoint.sh && \
    echo 'echo "Attempting to list installed extensions via code-server command (as vscodeuser):"' >> /entrypoint.sh && \
    echo 'sudo -iu vscodeuser /home/vscodeuser/.local/bin/code-server --list-extensions --extensions-dir /home/vscodeuser/.local/share/code-server/extensions || echo "Listing extensions via command failed."' >> /entrypoint.sh && \
    echo 'echo "Starting code-server..."' >> /entrypoint.sh && \
    echo 'exec sudo -iu vscodeuser /home/vscodeuser/.local/bin/code-server --verbose' >> /entrypoint.sh && \
    chmod +x /entrypoint.sh

# Expose VSCode Server port
EXPOSE 8080

# Set entrypoint
ENTRYPOINT ["/entrypoint.sh"]
